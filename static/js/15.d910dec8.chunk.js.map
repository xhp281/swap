{"version":3,"sources":["nft/components/explore/CollectionTable.tsx","nft/components/explore/Carousel.tsx","nft/components/explore/CarouselCard.tsx","nft/components/explore/Banner.tsx","nft/components/explore/Cells/Cells.tsx","nft/components/explore/Cells/Cells.css.ts","nft/components/explore/Explore.css.ts","nft/components/explore/Table.tsx","nft/components/explore/TrendingCollections.tsx","nft/pages/explore/index.tsx"],"names":["ColumnHeaders","CarouselContainer","styled","div","CarouselCardContainer","theme","breakpoint","md","CarouselItemCard","a","CarouselItemIcon","accentAction","sm","opacity","hover","MAX_CARD_WIDTH","Carousel","children","activeIndex","toggleNextSlide","idx","useCallback","x","l","length","calculateCardIndex","getPos","i","firstVis","firstVisIdx","calculateFirstCardIndex","useSprings","springs","set","prev","useRef","runSprings","y","vy","Math","floor","position","prevPosition","current","rank","calculateRank","immediate","config","tension","friction","direction","useEffect","toggleSlide","next","interval","setInterval","clearInterval","onClick","width","height","map","style","LoadingCarousel","backgroundSurface","backgroundOutline","CarouselCardBorder","transition","duration","fast","timing","inOut","deepShadow","CardHeaderContainer","src","LoadingCardHeaderContainer","loadingAnimation","backgroundInteractive","CardHeaderColumn","CardNameRow","IconContainer","CollectionNameContainer","LoadingCollectionNameContainer","LoadingBubble","HeaderOverlay","CollectionImage","img","accentTextLightPrimary","LoadingCollectionImage","LoadingTableElement","TableElement","FirstColumnTextWrapper","lg","CardBottomContainer","MarketplaceIcon","MarketplaceRow","marketplace","floorInEth","listings","toLowerCase","alt","BodySmall","color","undefined","formatNumberOrString","NumberType","NFTTokenFloorPriceTrailingZeros","MARKETS_TO_CHECK","Markets","Opensea","X2Y2","LooksRare","MARKETS_ENUM_TO_NAME","CarouselCard","collection","gqlCollection","useCollectionQuery","address","SubHeaderSmall","formatWeiToDecimal","toString","marketplaceCount","reduce","acc","cur","count","market","find","floorPrice","LoadingTable","Array","index","CarouselCardHeader","useTheme","bannerImageUrl","imageUrl","MediumHeader","fontWeight","lineHeight","display","name","isVerified","LoadingCarouselCard","BannerContainer","AbsoluteFill","BannerBackground","props","backgroundImage","darkMode","PlainBackground","opacify","userThemeColor","BannerMainArea","HeaderContainer","textPrimary","EXCLUDED_COLLECTIONS","Banner","navigate","useNavigate","isMobile","useIsMobile","data","useQuery","fetchTrendingCollections","volumeType","timePeriod","TimePeriod","OneDay","size","refetchOnReconnect","refetchOnWindowFocus","refetchOnMount","collections","useMemo","filter","includes","slice","collectionAddresses","useLoadCollectionQuery","useState","activeCollectionIdx","setActiveCollectionIdx","onToggleNextSlide","activeCollection","fallback","TruncatedText","CollectionName","TruncatedSubHeader","ThemedText","SubHeader","TruncatedSubHeaderSmall","RoundedImage","backgroundModule","ChangeCellContainer","change","accentSuccess","accentFailure","EthContainer","CollectionTitleCell","value","logo","className","DiscreteNumberCell","volumeFormatter","getDenominatedValue","denomination","inWei","usdPrice","Denomination","ETH","parseFloat","formatEther","EthCell","denominatedValue","formattedValue","ethNumberStandardFormatter","TextComponent","BodyPrimary","TextCell","VolumeCell","ChangeCell","Caption","abs","round","table","thead","th","RankCellContainer","StyledRow","tr","stateOverlayHover","stateOverlayPressed","StyledLoadingRow","StyledHeader","disabled","click","StyledLoadingHolder","StyledCollectionNameHolder","StyledImageHolder","StyledRankHolder","Table","columns","smallHiddenColumns","mediumHiddenColumns","largeHiddenColumns","useWindowSize","useTable","initialState","sortBy","desc","id","Volume","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","setHiddenColumns","visibleColumns","styles","headerGroup","getHeaderGroupProps","key","headers","column","getHeaderProps","getSortByToggleProps","textAlign","paddingLeft","disableSortBy","Box","as","isSorted","isSortedDesc","transform","render","row","getRowProps","original","cells","cell","cellIndex","getCellProps","maxWidth","BodySecondary","fontSize","_","compareFloats","b","CollectionTable","floorSort","rowA","rowB","aFloor","BigNumber","from","bFloor","gte","floorChangeSort","volumeSort","volume","volumeChangeSort","Header","accessor","Cell","Floor","sortType","AllTime","FloorChange","sortDescFirst","VolumeChange","Items","totalSupply","Owners","owners","timeOptions","label","SevenDays","ThirtyDays","ExploreContainer","FiltersRow","Filter","Selector","active","OpacityHoverState","StyledSelectorText","textSecondary","TrendingCollections","setTimePeriod","isEthToggled","setEthToggled","refetchInterval","isSuccess","fetchPrice","trendingCollections","d","volumeChange","type","floorChange","ownersChange","sales","USD","timeOption","NftExplore","setBagExpanded","useBag","state","bagExpanded","manualClose","page","PageName","NFT_EXPLORE_PAGE","shouldLogImpression"],"mappings":"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","file":"static/js/15.d910dec8.chunk.js","sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\nimport { CollectionTableColumn, TimePeriod } from 'nft/types'\nimport { useMemo } from 'react'\nimport { CellProps, Column, Row } from 'react-table'\nimport { MediumOnly } from 'theme/components'\n\nimport { ChangeCell, CollectionTitleCell, DiscreteNumberCell, EthCell, TextCell, VolumeCell } from './Cells/Cells'\nimport { Table } from './Table'\n\nexport enum ColumnHeaders {\n  Volume = 'Volume',\n  VolumeChange = 'Volume change',\n  Floor = 'Floor',\n  FloorChange = 'Floor change',\n  Sales = 'Sales',\n  Items = 'Items',\n  Owners = 'Owners',\n}\n\nconst VOLUME_CHANGE_MAX_VALUE = 9999\n\nconst compareFloats = (a: number, b: number): 1 | -1 => {\n  return Math.round(a * 100000) >= Math.round(b * 100000) ? 1 : -1\n}\n\nconst CollectionTable = ({ data, timePeriod }: { data: CollectionTableColumn[]; timePeriod: TimePeriod }) => {\n  const floorSort = useMemo(() => {\n    return (rowA: Row<CollectionTableColumn>, rowB: Row<CollectionTableColumn>) => {\n      const aFloor = BigNumber.from(rowA.original.floor.value ?? 0)\n      const bFloor = BigNumber.from(rowB.original.floor.value ?? 0)\n\n      return aFloor.gte(bFloor) ? 1 : -1\n    }\n  }, [])\n\n  const floorChangeSort = useMemo(() => {\n    return (rowA: Row<CollectionTableColumn>, rowB: Row<CollectionTableColumn>) => {\n      return compareFloats(rowA.original.floor.change, rowB.original.floor.change)\n    }\n  }, [])\n\n  const volumeSort = useMemo(() => {\n    return (rowA: Row<CollectionTableColumn>, rowB: Row<CollectionTableColumn>) => {\n      return compareFloats(rowA.original.volume.value, rowB.original.volume.value)\n    }\n  }, [])\n\n  const volumeChangeSort = useMemo(() => {\n    return (rowA: Row<CollectionTableColumn>, rowB: Row<CollectionTableColumn>) => {\n      return compareFloats(rowA.original.volume.change, rowB.original.volume.change)\n    }\n  }, [])\n\n  const columns: Column<CollectionTableColumn>[] = useMemo(\n    () => [\n      {\n        Header: 'Collection name',\n        accessor: 'collection',\n        Cell: CollectionTitleCell,\n        disableSortBy: true,\n      },\n      {\n        id: ColumnHeaders.Floor,\n        Header: ColumnHeaders.Floor,\n        accessor: ({ floor }) => floor.value,\n        sortType: floorSort,\n        Cell: function ethCell(cell: CellProps<CollectionTableColumn>) {\n          return (\n            <>\n              <EthCell\n                value={cell.row.original.floor.value}\n                denomination={cell.row.original.denomination}\n                usdPrice={cell.row.original.usdPrice}\n              />\n              {timePeriod !== TimePeriod.AllTime && (\n                <MediumOnly>\n                  <ChangeCell change={cell.row.original.floor.change} />\n                </MediumOnly>\n              )}\n            </>\n          )\n        },\n      },\n      {\n        id: ColumnHeaders.FloorChange,\n        Header: ColumnHeaders.FloorChange,\n        accessor: ({ floor }) => floor.value,\n        sortDescFirst: true,\n        disableSortBy: timePeriod === TimePeriod.AllTime,\n        sortType: floorChangeSort,\n        Cell: function changeCell(cell: CellProps<CollectionTableColumn>) {\n          return timePeriod === TimePeriod.AllTime ? (\n            <TextCell value=\"-\" />\n          ) : (\n            <ChangeCell change={cell.row.original.floor.change} />\n          )\n        },\n      },\n      {\n        id: ColumnHeaders.Volume,\n        Header: ColumnHeaders.Volume,\n        accessor: ({ volume }) => volume.value,\n        sortDescFirst: true,\n        sortType: volumeSort,\n        Cell: function volumeCell(cell: CellProps<CollectionTableColumn>) {\n          return (\n            <VolumeCell\n              value={cell.row.original.volume.value}\n              denomination={cell.row.original.denomination}\n              usdPrice={cell.row.original.usdPrice}\n            />\n          )\n        },\n      },\n      {\n        id: ColumnHeaders.VolumeChange,\n        Header: ColumnHeaders.VolumeChange,\n        accessor: ({ volume }) => volume.value,\n        sortDescFirst: true,\n        disableSortBy: timePeriod === TimePeriod.AllTime,\n        sortType: volumeChangeSort,\n        Cell: function changeCell(cell: CellProps<CollectionTableColumn>) {\n          const { change } = cell.row.original.volume\n          return timePeriod === TimePeriod.AllTime ? (\n            <TextCell value=\"-\" />\n          ) : change >= VOLUME_CHANGE_MAX_VALUE ? (\n            <ChangeCell change={change}>{`>${VOLUME_CHANGE_MAX_VALUE}`}%</ChangeCell>\n          ) : (\n            <ChangeCell change={change} />\n          )\n        },\n      },\n      {\n        id: ColumnHeaders.Items,\n        Header: ColumnHeaders.Items,\n        accessor: 'totalSupply',\n        sortDescFirst: true,\n        Cell: function discreteNumberCell(cell: CellProps<CollectionTableColumn>) {\n          return <DiscreteNumberCell value={{ value: cell.row.original.totalSupply }} />\n        },\n      },\n      {\n        Header: ColumnHeaders.Owners,\n        accessor: ({ owners }) => owners.value,\n        sortDescFirst: true,\n        Cell: function discreteNumberCell(cell: CellProps<CollectionTableColumn>) {\n          return <DiscreteNumberCell value={cell.row.original.owners} />\n        },\n      },\n    ],\n    [floorChangeSort, floorSort, volumeChangeSort, volumeSort, timePeriod]\n  )\n  return (\n    <>\n      <Table\n        smallHiddenColumns={[\n          ColumnHeaders.Items,\n          ColumnHeaders.FloorChange,\n          ColumnHeaders.Volume,\n          ColumnHeaders.VolumeChange,\n          ColumnHeaders.Owners,\n        ]}\n        mediumHiddenColumns={[\n          ColumnHeaders.Items,\n          ColumnHeaders.FloorChange,\n          ColumnHeaders.VolumeChange,\n          ColumnHeaders.Owners,\n        ]}\n        largeHiddenColumns={[ColumnHeaders.Items, ColumnHeaders.Owners]}\n        {...{ data, columns }}\n      />\n    </>\n  )\n}\n\nexport default CollectionTable\n","import { ChevronLeftIcon, ChevronRightIcon } from 'nft/components/icons'\nimport { calculateCardIndex, calculateFirstCardIndex, calculateRank } from 'nft/utils'\nimport { ReactNode, useCallback, useEffect, useRef } from 'react'\nimport { a, useSprings } from 'react-spring'\nimport styled from 'styled-components/macro'\n\nconst CarouselContainer = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n`\n\nconst CarouselCardContainer = styled.div`\n  position: relative;\n  width: 100%;\n  overflow-x: hidden;\n  max-width: 100%;\n  height: 390px;\n\n  @media only screen and (min-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\n    max-width: 600px;\n  }\n`\n\nconst CarouselItemCard = styled(a.div)`\n  display: flex;\n  justify-content: center;\n  padding: 4px 12px 32px;\n  position: absolute;\n  will-change: transform;\n  width: calc(100%);\n  height: calc(100%);\n\n  @media screen and (min-width: ${({ theme }) => theme.breakpoint.md}px) {\n    padding: 4px 32px 32px;\n  }\n`\n\nconst CarouselItemIcon = styled.div`\n  align-items: center;\n  color: ${({ theme }) => theme.accentAction};\n  cursor: pointer;\n  display: none;\n  user-select: none;\n  height: calc(100%);\n  padding: 4px 0 32px;\n\n  @media only screen and (min-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    display: flex;\n  }\n\n  :hover {\n    opacity: ${({ theme }) => theme.opacity.hover};\n  }\n`\n\ninterface CarouselProps {\n  children: ReactNode[]\n  activeIndex: number\n  toggleNextSlide: (idx: number) => void\n}\n\nconst MAX_CARD_WIDTH = 800\n\nexport const Carousel = ({ children, activeIndex, toggleNextSlide }: CarouselProps) => {\n  const idx = useCallback((x: number, l = children.length) => calculateCardIndex(x, l), [children])\n  const getPos = useCallback(\n    (i: number, firstVis: number, firstVisIdx: number) => calculateFirstCardIndex(i, firstVis, firstVisIdx, idx),\n    [idx]\n  )\n  const [springs, set] = useSprings(children.length, (i) => ({\n    x: (i < children.length - 1 ? i : -1) * MAX_CARD_WIDTH,\n  }))\n  const prev = useRef([0, 1])\n\n  const runSprings = useCallback(\n    (y: number, vy: number) => {\n      const firstVis = idx(Math.floor(y / MAX_CARD_WIDTH) % children.length)\n      const firstVisIdx = vy < 0 ? children.length - 2 : 1\n      set((i) => {\n        const position = getPos(i, firstVis, firstVisIdx)\n        const prevPosition = getPos(i, prev.current[0], prev.current[1])\n        const rank = calculateRank(firstVis, firstVisIdx, position, children.length, y)\n        return {\n          x: (-y % (MAX_CARD_WIDTH * children.length)) + MAX_CARD_WIDTH * rank,\n          immediate: vy < 0 ? prevPosition > position : prevPosition < position,\n          config: { tension: 250, friction: 35 },\n        }\n      })\n      prev.current = [firstVis, firstVisIdx]\n    },\n    [idx, getPos, set, children.length]\n  )\n\n  const direction = useRef(0)\n\n  useEffect(() => {\n    runSprings(activeIndex * MAX_CARD_WIDTH, direction.current)\n  }, [activeIndex, runSprings])\n\n  const toggleSlide = useCallback(\n    (next: -1 | 1) => {\n      direction.current = next\n      toggleNextSlide(next)\n    },\n    [toggleNextSlide]\n  )\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      toggleSlide(1)\n    }, 7_000)\n    return () => {\n      clearInterval(interval)\n    }\n  }, [toggleSlide, activeIndex])\n\n  return (\n    <CarouselContainer>\n      <CarouselItemIcon onClick={() => toggleSlide(-1)}>\n        <ChevronLeftIcon width=\"16px\" height=\"16px\" />\n      </CarouselItemIcon>\n      <CarouselCardContainer>\n        {springs.map(({ x }, i) => (\n          <CarouselItemCard key={i} style={{ x }}>\n            {children[i]}\n          </CarouselItemCard>\n        ))}\n      </CarouselCardContainer>\n      <CarouselItemIcon onClick={() => toggleSlide(1)}>\n        <ChevronRightIcon width=\"16px\" height=\"16px\" />\n      </CarouselItemIcon>\n    </CarouselContainer>\n  )\n}\n\nexport const LoadingCarousel = ({ children }: { children: ReactNode }) => (\n  <Carousel activeIndex={0} toggleNextSlide={() => undefined}>\n    {[children]}\n  </Carousel>\n)\n","import { formatNumberOrString, NumberType } from '@uniswap/conedison/format'\nimport { loadingAnimation } from 'components/Loader/styled'\nimport { LoadingBubble } from 'components/Tokens/loading'\nimport { useCollectionQuery } from 'graphql/data/nft/Collection'\nimport { VerifiedIcon } from 'nft/components/icons'\nimport { Markets, TrendingCollection } from 'nft/types'\nimport { formatWeiToDecimal } from 'nft/utils'\nimport styled, { useTheme } from 'styled-components/macro'\nimport { ThemedText } from 'theme/components/text'\n\nconst CarouselCardContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.backgroundSurface};\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\n  border-radius: 20px;\n  overflow: hidden;\n  height: 100%;\n`\n\nconst CarouselCardBorder = styled.div`\n  width: 100%;\n  position: relative;\n  border-radius: 22px;\n  cursor: pointer;\n  border: 2px solid transparent;\n  transition-property: border-color;\n  transition-duration: ${({ theme }) => theme.transition.duration.fast};\n  transition-timing-function: ${({ theme }) => theme.transition.timing.inOut};\n\n  :hover {\n    border: 2px solid ${({ theme }) => theme.backgroundOutline};\n  }\n\n  ::after {\n    content: '';\n    opacity: 0;\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    border-radius: 22px;\n    z-index: -1;\n    box-shadow: ${({ theme }) => theme.deepShadow};\n    transition-property: opacity;\n    transition-duration: ${({ theme }) => theme.transition.duration.fast};\n    transition-timing-function: ${({ theme }) => theme.transition.timing.inOut};\n  }\n\n  :hover::after {\n    opacity: 1;\n  }\n`\n\nconst CardHeaderContainer = styled.div<{ src: string }>`\n  position: relative;\n  background-image: ${({ src }) => `url(${src})`};\n  background-size: cover;\n  background-position: center;\n`\n\nconst LoadingCardHeaderContainer = styled.div`\n  position: relative;\n  animation: ${loadingAnimation} 1.5s infinite;\n  animation-fill-mode: both;\n  background: linear-gradient(\n    to left,\n    ${({ theme }) => theme.backgroundInteractive} 25%,\n    ${({ theme }) => theme.backgroundOutline} 50%,\n    ${({ theme }) => theme.backgroundInteractive} 75%\n  );\n  will-change: background-position;\n  background-size: 400%;\n`\n\nconst CardHeaderColumn = styled.div`\n  position: relative;\n  display: flex;\n  flex: 1;\n  align-items: center;\n  flex-direction: column;\n  gap: 8px;\n  height: 202px;\n  justify-content: center;\n  padding: 0 40px;\n  z-index: 1;\n`\n\nconst CardNameRow = styled.div`\n  display: flex;\n  gap: 2px;\n`\nconst IconContainer = styled.div`\n  display: flex;\n  flex-shrink: 0;\n  align-items: center;\n`\n\nconst CollectionNameContainer = styled.div`\n  display: -webkit-box;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  text-align: center;\n  max-height: 56px;\n`\n\nconst LoadingCollectionNameContainer = styled(LoadingBubble)`\n  width: 50%;\n`\n\nconst HeaderOverlay = styled.div`\n  position: absolute;\n  bottom: 0px;\n  top: 0px;\n  right: 0px;\n  left: 0px;\n  background: linear-gradient(180deg, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0.6) 100%, rgba(0, 0, 0, 0.08));\n  z-index: 0;\n`\n\nconst CollectionImage = styled.img`\n  width: 86px;\n  height: 86px;\n  background: ${({ theme }) => theme.accentTextLightPrimary};\n  border: 2px solid ${({ theme }) => theme.accentTextLightPrimary};\n  border-radius: 100px;\n`\n\nconst LoadingCollectionImage = styled.div`\n  width: 86px;\n  height: 86px;\n  border-radius: 100px;\n  animation: ${loadingAnimation} 1.5s infinite;\n  animation-fill-mode: both;\n  background: linear-gradient(\n    to left,\n    ${({ theme }) => theme.backgroundInteractive} 25%,\n    ${({ theme }) => theme.backgroundOutline} 50%,\n    ${({ theme }) => theme.backgroundInteractive} 75%\n  );\n  will-change: background-position;\n  background-size: 400%;\n`\n\nconst LoadingTableElement = styled(LoadingBubble)`\n  width: 50px;\n`\n\nconst TableElement = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 6px;\n`\n\nconst FirstColumnTextWrapper = styled.div`\n  @media (min-width: ${({ theme }) => theme.breakpoint.sm}px) and (max-width: ${({ theme }) => theme.breakpoint.lg}px) {\n    display: none;\n  }\n}\n`\n\nconst CardBottomContainer = styled.div`\n  display: grid;\n  flex: 1;\n  gap: 8px;\n  grid-template-columns: auto auto auto;\n  padding: 16px 16px 20px;\n\n  ${TableElement}:nth-child(3n-1), ${LoadingTableElement}:nth-child(3n-1) {\n    justify-self: center;\n  }\n\n  ${TableElement}:nth-child(3n), ${LoadingTableElement}:nth-child(3n) {\n    justify-self: right;\n  }\n`\n\nconst MarketplaceIcon = styled.img`\n  width: 20px;\n  height: 20px;\n`\n\ninterface MarketplaceRowProps {\n  marketplace: string\n  floorInEth?: number\n  listings?: number\n}\n\nexport const MarketplaceRow = ({ marketplace, floorInEth, listings }: MarketplaceRowProps) => {\n  return (\n    <>\n      <TableElement>\n        <MarketplaceIcon\n          src={`/nft/svgs/marketplaces/${marketplace.toLowerCase()}-grey.svg`}\n          alt={`${marketplace} icon`}\n        />\n        <FirstColumnTextWrapper>\n          <ThemedText.BodySmall color=\"textSecondary\">{marketplace}</ThemedText.BodySmall>\n        </FirstColumnTextWrapper>\n      </TableElement>\n      <TableElement>\n        <ThemedText.BodySmall color=\"textSecondary\">\n          {floorInEth !== undefined\n            ? formatNumberOrString(floorInEth, NumberType.NFTTokenFloorPriceTrailingZeros)\n            : '-'}{' '}\n          ETH\n        </ThemedText.BodySmall>\n      </TableElement>\n      <TableElement>\n        <ThemedText.BodySmall color=\"textSecondary\">{listings ?? '-'}</ThemedText.BodySmall>\n      </TableElement>\n    </>\n  )\n}\n\ninterface CarouselCardProps {\n  collection: TrendingCollection\n  onClick: () => void\n}\n\nconst MARKETS_TO_CHECK = [Markets.Opensea, Markets.X2Y2, Markets.LooksRare] as const\nconst MARKETS_ENUM_TO_NAME = {\n  [Markets.Opensea]: 'OpenSea',\n  [Markets.X2Y2]: 'X2Y2',\n  [Markets.LooksRare]: 'LooksRare',\n}\n\nexport const CarouselCard = ({ collection, onClick }: CarouselCardProps) => {\n  const gqlCollection = useCollectionQuery(collection.address)\n\n  return (\n    <CarouselCardBorder>\n      <CarouselCardContainer onClick={onClick}>\n        <CarouselCardHeader collection={collection} />\n        <CardBottomContainer>\n          <>\n            <TableElement>\n              <MarketplaceIcon src=\"/nft/svgs/marketplaces/uniswap-magenta.svg\" alt=\"Uniswap icon\" />\n              <FirstColumnTextWrapper>\n                <ThemedText.SubHeaderSmall color=\"userThemeColor\">Uniswap</ThemedText.SubHeaderSmall>\n              </FirstColumnTextWrapper>\n            </TableElement>\n            <TableElement>\n              <ThemedText.SubHeaderSmall color=\"userThemeColor\">\n                {formatWeiToDecimal(collection.floor.toString())} ETH Floor\n              </ThemedText.SubHeaderSmall>\n            </TableElement>\n            <TableElement>\n              <ThemedText.SubHeaderSmall color=\"userThemeColor\">\n                {gqlCollection.marketplaceCount?.reduce((acc, cur) => acc + cur.count, 0)} Listings\n              </ThemedText.SubHeaderSmall>\n            </TableElement>\n            {MARKETS_TO_CHECK.map((market) => {\n              const marketplace = gqlCollection.marketplaceCount?.find(\n                (marketplace) => marketplace.marketplace === market\n              )\n              if (!marketplace) {\n                return null\n              }\n              return (\n                <MarketplaceRow\n                  key={`CarouselCard-key-${collection.address}-${marketplace.marketplace}`}\n                  marketplace={MARKETS_ENUM_TO_NAME[market]}\n                  listings={marketplace.count}\n                  floorInEth={marketplace.floorPrice}\n                />\n              )\n            })}\n          </>\n        </CardBottomContainer>\n      </CarouselCardContainer>\n    </CarouselCardBorder>\n  )\n}\n\nconst DEFAULT_TABLE_ELEMENTS = 12\n\nexport const LoadingTable = () => {\n  return (\n    <>\n      {[...Array(DEFAULT_TABLE_ELEMENTS)].map((index) => (\n        <LoadingTableElement key={index} />\n      ))}\n    </>\n  )\n}\n\nconst CarouselCardHeader = ({ collection }: { collection: TrendingCollection }) => {\n  const theme = useTheme()\n  return (\n    <CardHeaderContainer src={collection.bannerImageUrl}>\n      <CardHeaderColumn>\n        <CollectionImage src={collection.imageUrl} />\n        <CardNameRow>\n          <CollectionNameContainer>\n            <ThemedText.MediumHeader\n              color={theme.accentTextLightPrimary}\n              fontWeight=\"500\"\n              lineHeight=\"28px\"\n              display=\"inline\"\n            >\n              {collection.name}\n            </ThemedText.MediumHeader>\n          </CollectionNameContainer>\n          {collection.isVerified && (\n            <IconContainer>\n              <VerifiedIcon width=\"24px\" height=\"24px\" />\n            </IconContainer>\n          )}\n        </CardNameRow>\n      </CardHeaderColumn>\n      <HeaderOverlay />\n    </CardHeaderContainer>\n  )\n}\n\nexport const LoadingCarouselCard = ({ collection }: { collection?: TrendingCollection }) => {\n  return (\n    <CarouselCardBorder>\n      <CarouselCardContainer>\n        {collection ? (\n          <CarouselCardHeader collection={collection} />\n        ) : (\n          <LoadingCardHeaderContainer>\n            <CardHeaderColumn>\n              <LoadingCollectionImage />\n              <LoadingCollectionNameContainer />\n            </CardHeaderColumn>\n            <HeaderOverlay />\n          </LoadingCardHeaderContainer>\n        )}\n        <CardBottomContainer>\n          <LoadingTable />\n        </CardBottomContainer>\n      </CarouselCardContainer>\n    </CarouselCardBorder>\n  )\n}\n","import { useLoadCollectionQuery } from 'graphql/data/nft/Collection'\nimport { useIsMobile } from 'nft/hooks'\nimport { fetchTrendingCollections } from 'nft/queries'\nimport { TimePeriod } from 'nft/types'\nimport { calculateCardIndex } from 'nft/utils'\nimport { Suspense, useCallback, useMemo, useState } from 'react'\nimport { useQuery } from 'react-query'\nimport { useNavigate } from 'react-router-dom'\nimport styled from 'styled-components/macro'\nimport { opacify } from 'theme/utils'\n\nimport { Carousel, LoadingCarousel } from './Carousel'\nimport { CarouselCard, LoadingCarouselCard } from './CarouselCard'\n\nconst BannerContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n  padding-top: 32px;\n  position: relative;\n\n  @media only screen and (min-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    padding: 32px 16px 0 16px;\n  }\n`\n\nconst AbsoluteFill = styled.div`\n  position: absolute;\n  top: -96px;\n  left: 0;\n  right: 0;\n  bottom: 0;\n`\n\n// Safari has issues with blur / overflow, forcing GPU rendering with `translate3d` fixes it\n// https://stackoverflow.com/a/71353198\nconst BannerBackground = styled(AbsoluteFill)<{ backgroundImage: string }>`\n  transform: translate3d(0, 0, 0) scaleY(1.1);\n\n  background-image: ${(props) => `url(${props.backgroundImage})`};\n  filter: blur(62px);\n\n  opacity: ${({ theme }) => (theme.darkMode ? 0.3 : 0.2)};\n`\n\nconst PlainBackground = styled(AbsoluteFill)`\n  background: ${({ theme }) => `linear-gradient(${opacify(10, theme.userThemeColor)}, transparent)`};\n`\n\nconst BannerMainArea = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  height: 100%;\n  gap: 36px;\n  max-width: 1200px;\n  justify-content: space-between;\n  z-index: 2;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    flex-direction: column;\n    height: 100%;\n    gap: 14px;\n    margin-top: 4px;\n    margin-bottom: 6px;\n  }\n`\n\nconst HeaderContainer = styled.div`\n  display: flex;\n  max-width: 500px;\n  font-weight: 500;\n  font-size: 72px;\n  line-height: 88px;\n  justify-content: start;\n  align-items: start;\n  align-self: center;\n  flex-shrink: 0;\n  padding-bottom: 32px;\n\n  color: ${({ theme }) => theme.textPrimary};\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.lg}px`}) {\n    font-size: 48px;\n    line-height: 67px;\n  }\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\n    font-size: 36px;\n    line-height: 50px;\n  }\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    font-size: 20px;\n    line-height: 28px;\n    justify-content: center;\n    align-items: center;\n    padding-top: 0px;\n    padding-bottom: 0px;\n  }\n`\n\n// Exclude collections that are not available in any of the following - OpenSea, X2Y2 and LooksRare:\nconst EXCLUDED_COLLECTIONS = ['0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb']\nconst TRENDING_COLLECTION_SIZE = 5\n\nconst Banner = () => {\n  const navigate = useNavigate()\n  const isMobile = useIsMobile()\n\n  const { data } = useQuery(\n    ['trendingCollections'],\n    () => {\n      return fetchTrendingCollections({\n        volumeType: 'eth',\n        timePeriod: TimePeriod.OneDay,\n        size: TRENDING_COLLECTION_SIZE + EXCLUDED_COLLECTIONS.length,\n      })\n    },\n    {\n      refetchOnReconnect: false,\n      refetchOnWindowFocus: false,\n      refetchOnMount: false,\n    }\n  )\n\n  const collections = useMemo(\n    () => data?.filter((collection) => !EXCLUDED_COLLECTIONS.includes(collection.address)).slice(0, 5),\n    [data]\n  )\n\n  // Trigger queries for the top trending collections, so that the data is immediately available if the user clicks through.\n  const collectionAddresses = useMemo(() => collections?.map(({ address }) => address), [collections])\n  useLoadCollectionQuery(collectionAddresses)\n\n  const [activeCollectionIdx, setActiveCollectionIdx] = useState(0)\n  const onToggleNextSlide = useCallback(\n    (direction: number) => {\n      if (!collections) return\n      setActiveCollectionIdx((idx) => calculateCardIndex(idx + direction, collections.length))\n    },\n    [collections]\n  )\n\n  const activeCollection = collections?.[activeCollectionIdx]\n\n  return (\n    <BannerContainer>\n      {activeCollection ? (\n        activeCollection.bannerImageUrl ? (\n          <BannerBackground backgroundImage={activeCollection.bannerImageUrl} />\n        ) : (\n          <PlainBackground />\n        )\n      ) : null}\n      <BannerMainArea>\n        <HeaderContainer>\n          Better prices. {!isMobile && <br />}\n          More listings.\n        </HeaderContainer>\n        {collections ? (\n          <Carousel activeIndex={activeCollectionIdx} toggleNextSlide={onToggleNextSlide}>\n            {collections.map((collection) => (\n              <Suspense fallback={<LoadingCarouselCard collection={collection} />} key={collection.address}>\n                <CarouselCard\n                  key={collection.address}\n                  collection={collection}\n                  onClick={() => navigate(`/nfts/collection/${collection.address}`)}\n                />\n              </Suspense>\n            ))}\n          </Carousel>\n        ) : (\n          <LoadingCarousel>\n            <LoadingCarouselCard />\n          </LoadingCarousel>\n        )}\n      </BannerMainArea>\n    </BannerContainer>\n  )\n}\n\nexport default Banner\n","import { formatEther } from '@ethersproject/units'\nimport { SquareArrowDownIcon, SquareArrowUpIcon, VerifiedIcon } from 'nft/components/icons'\nimport { useIsMobile } from 'nft/hooks'\nimport { Denomination } from 'nft/types'\nimport { volumeFormatter } from 'nft/utils'\nimport { ReactNode } from 'react'\nimport styled from 'styled-components/macro'\nimport { ThemedText } from 'theme'\n\nimport { ethNumberStandardFormatter, formatWeiToDecimal } from '../../../utils/currency'\nimport * as styles from './Cells.css'\n\nconst TruncatedText = styled.div`\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n`\n\nconst CollectionNameContainer = styled(TruncatedText)`\n  display: flex;\n  padding: 14px 0px 14px 8px;\n  align-items: center;\n`\n\nconst CollectionName = styled(TruncatedText)`\n  margin-left: 8px;\n`\n\nconst TruncatedSubHeader = styled(ThemedText.SubHeader)`\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n`\nconst TruncatedSubHeaderSmall = styled(ThemedText.SubHeaderSmall)`\n  color: ${({ theme }) => `${theme.textPrimary}`};\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n`\n\nconst RoundedImage = styled.div<{ src?: string }>`\n  height: 36px;\n  width: 36px;\n  border-radius: 36px;\n  background: ${({ src, theme }) => (src ? `url(${src})` : theme.backgroundModule)};\n  background-size: cover;\n  background-position: center;\n  flex-shrink: 0;\n`\n\nconst ChangeCellContainer = styled.div<{ change: number }>`\n  display: flex;\n  color: ${({ theme, change }) => (change >= 0 ? theme.accentSuccess : theme.accentFailure)};\n  justify-content: end;\n  align-items: center;\n  gap: 2px;\n`\n\nconst EthContainer = styled.div`\n  display: flex;\n  justify-content: end;\n`\n\ninterface CellProps {\n  value: {\n    logo?: string\n    name?: string\n    address?: string\n    isVerified?: boolean\n    value?: number\n    change?: number\n  }\n}\n\nexport const CollectionTitleCell = ({ value }: CellProps) => {\n  const isMobile = useIsMobile()\n  return (\n    <CollectionNameContainer>\n      <RoundedImage src={value.logo} />\n      <CollectionName>\n        {isMobile ? (\n          <TruncatedSubHeaderSmall>{value.name}</TruncatedSubHeaderSmall>\n        ) : (\n          <TruncatedSubHeader>{value.name}</TruncatedSubHeader>\n        )}\n      </CollectionName>\n      {value.isVerified && (\n        <span className={styles.verifiedBadge}>\n          <VerifiedIcon />\n        </span>\n      )}\n    </CollectionNameContainer>\n  )\n}\n\nexport const DiscreteNumberCell = ({ value }: CellProps) => (\n  <span>{value.value ? volumeFormatter(value.value) : '-'}</span>\n)\n\nconst getDenominatedValue = (denomination: Denomination, inWei: boolean, value?: number, usdPrice?: number) => {\n  if (denomination === Denomination.ETH) return value\n  if (usdPrice && value) return usdPrice * (inWei ? parseFloat(formatEther(value)) : value)\n\n  return undefined\n}\n\nexport const EthCell = ({\n  value,\n  denomination,\n  usdPrice,\n}: {\n  value?: number\n  denomination: Denomination\n  usdPrice?: number\n}) => {\n  const denominatedValue = getDenominatedValue(denomination, true, value, usdPrice)\n  const formattedValue = denominatedValue\n    ? denomination === Denomination.ETH\n      ? formatWeiToDecimal(denominatedValue.toString(), true) + ' ETH'\n      : ethNumberStandardFormatter(denominatedValue, true, false, true)\n    : '-'\n\n  const isMobile = useIsMobile()\n  const TextComponent = isMobile ? ThemedText.BodySmall : ThemedText.BodyPrimary\n\n  return (\n    <EthContainer>\n      <TextComponent>{value ? formattedValue : '-'}</TextComponent>\n    </EthContainer>\n  )\n}\n\nexport const TextCell = ({ value }: { value: string }) => <ThemedText.BodyPrimary>{value}</ThemedText.BodyPrimary>\n\nexport const VolumeCell = ({\n  value,\n  denomination,\n  usdPrice,\n}: {\n  value?: number\n  denomination: Denomination\n  usdPrice?: number\n}) => {\n  const denominatedValue = getDenominatedValue(denomination, false, value, usdPrice)\n\n  const formattedValue = denominatedValue\n    ? denomination === Denomination.ETH\n      ? ethNumberStandardFormatter(denominatedValue.toString(), false, false, true) + ' ETH'\n      : ethNumberStandardFormatter(denominatedValue, true, false, true)\n    : '-'\n\n  return (\n    <EthContainer>\n      <ThemedText.BodyPrimary>{value ? formattedValue : '-'}</ThemedText.BodyPrimary>\n    </EthContainer>\n  )\n}\n\nexport const ChangeCell = ({ change, children }: { children?: ReactNode; change?: number }) => {\n  const isMobile = useIsMobile()\n  const TextComponent = isMobile ? ThemedText.Caption : ThemedText.BodyPrimary\n  return (\n    <ChangeCellContainer change={change ?? 0}>\n      {!change || change > 0 ? (\n        <SquareArrowUpIcon width=\"20px\" height=\"20px\" />\n      ) : (\n        <SquareArrowDownIcon width=\"20px\" height=\"20px\" />\n      )}\n      <TextComponent color=\"currentColor\">{children || `${change ? Math.abs(Math.round(change)) : 0}%`}</TextComponent>\n    </ChangeCellContainer>\n  )\n}\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/css/common.css.ts.vanilla.css!=!../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/common.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xMjdsOGhkZiB7CiAgYm9yZGVyOiBub25lOwp9Ci5fMTI3bDhoZGY6aG92ZXIgewogIGN1cnNvcjogcG9pbnRlcjsKfQouXzEyN2w4aGRmOmRpc2FibGVkIHsKICBjdXJzb3I6IGF1dG87Cn0KLl8xMjdsOGhkaCB7CiAgcGFkZGluZzogMTRweCAxOHB4Owp9Ci5fMTI3bDhoZGg6ZGlzYWJsZWQgewogIG9wYWNpdHk6IDAuMzsKfQouXzEyN2w4aGRqIHsKICBwYWRkaW5nOiAxOXB4IDE3cHg7CiAgYm94LXNpemluZzogYm9yZGVyLWJveDsKICB0ZXh0LWFsaWduOiBsZWZ0Owp9Ci5fMTI3bDhoZGs6OmJlZm9yZSB7CiAgY29udGVudDogIiI7CiAgcG9zaXRpb246IGFic29sdXRlOwogIGluc2V0OiAwOwogIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCg5MS40NmRlZywgIzQ2NzNGQSAwJSwgIzk2NDZGQSAxMDAuMTMlKSBib3JkZXItYm94OwogIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7CiAgLXdlYmtpdC1tYXNrOiBsaW5lYXItZ3JhZGllbnQoI2ZmZiAwIDApIHBhZGRpbmctYm94LCBsaW5lYXItZ3JhZGllbnQoI2ZmZiAwIDApOzsKICAtd2Via2l0LW1hc2stY29tcG9zaXRlOiB4b3I7OwogIG1hc2stY29tcG9zaXRlOiBleGNsdWRlOwogIGJvcmRlci1zdHlsZTogc29saWQ7CiAgYm9yZGVyLXdpZHRoOiAxcHg7CiAgYm9yZGVyLXJhZGl1czogaW5oZXJpdDsKICBwb2ludGVyLWV2ZW50czogbm9uZTsKfQouXzEyN2w4aGRsOjpiZWZvcmUgewogIG9wYWNpdHk6IDA7CiAgLXdlYmtpdC10cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2U7CiAgLW1vei10cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2U7CiAgLW1zLXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2Utb3V0Owp9Ci5fMTI3bDhoZGw6aG92ZXI6OmJlZm9yZSB7CiAgb3BhY2l0eTogMTsKfQouXzEyN2w4aGRuOmhvdmVyIHsKICBiYWNrZ3JvdW5kOiB2YXIoLS1yZ3c2ZXoxdyk7Cn0=\\\"}!../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var logo = 'rgw6ez77v';\nexport var title = 'rgw6ezcp rgw6ezb1 rgw6ez7lj rgw6ez4aj rgw6ez42d rgw6ez7if rgw6ez421 rgw6ez427 rgw6ez2a7 rgw6ez2ev';\nexport var address = 'rgw6ezcp rgw6ezb1 rgw6ez7lj rgw6ez4aj rgw6ez42d rgw6ez7if rgw6ez421 rgw6ez427 rgw6ez2a7 rgw6ez2ev rgw6ezjv rgw6ez3j rgw6ez1jj rgw6ez15d';\nexport var verifiedBadge = 'rgw6ezjj rgw6ez41j rgw6ez2kj rgw6ez17v rgw6ez117 rgw6ez42d';","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/css/common.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/common.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xMjdsOGhkZiB7CiAgYm9yZGVyOiBub25lOwp9Ci5fMTI3bDhoZGY6aG92ZXIgewogIGN1cnNvcjogcG9pbnRlcjsKfQouXzEyN2w4aGRmOmRpc2FibGVkIHsKICBjdXJzb3I6IGF1dG87Cn0KLl8xMjdsOGhkaCB7CiAgcGFkZGluZzogMTRweCAxOHB4Owp9Ci5fMTI3bDhoZGg6ZGlzYWJsZWQgewogIG9wYWNpdHk6IDAuMzsKfQouXzEyN2w4aGRqIHsKICBwYWRkaW5nOiAxOXB4IDE3cHg7CiAgYm94LXNpemluZzogYm9yZGVyLWJveDsKICB0ZXh0LWFsaWduOiBsZWZ0Owp9Ci5fMTI3bDhoZGs6OmJlZm9yZSB7CiAgY29udGVudDogIiI7CiAgcG9zaXRpb246IGFic29sdXRlOwogIGluc2V0OiAwOwogIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCg5MS40NmRlZywgIzQ2NzNGQSAwJSwgIzk2NDZGQSAxMDAuMTMlKSBib3JkZXItYm94OwogIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7CiAgLXdlYmtpdC1tYXNrOiBsaW5lYXItZ3JhZGllbnQoI2ZmZiAwIDApIHBhZGRpbmctYm94LCBsaW5lYXItZ3JhZGllbnQoI2ZmZiAwIDApOzsKICAtd2Via2l0LW1hc2stY29tcG9zaXRlOiB4b3I7OwogIG1hc2stY29tcG9zaXRlOiBleGNsdWRlOwogIGJvcmRlci1zdHlsZTogc29saWQ7CiAgYm9yZGVyLXdpZHRoOiAxcHg7CiAgYm9yZGVyLXJhZGl1czogaW5oZXJpdDsKICBwb2ludGVyLWV2ZW50czogbm9uZTsKfQouXzEyN2w4aGRsOjpiZWZvcmUgewogIG9wYWNpdHk6IDA7CiAgLXdlYmtpdC10cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2U7CiAgLW1vei10cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2U7CiAgLW1zLXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2Utb3V0Owp9Ci5fMTI3bDhoZGw6aG92ZXI6OmJlZm9yZSB7CiAgb3BhY2l0eTogMTsKfQouXzEyN2w4aGRuOmhvdmVyIHsKICBiYWNrZ3JvdW5kOiB2YXIoLS1yZ3c2ZXoxdyk7Cn0=\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/components/explore/Explore.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/explore/Explore.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xbW9yN3ZlMSB7CiAgbWF4LXdpZHRoOiAxMjAwcHg7CiAgbWFyZ2luOiAwIGF1dG87CiAgZGlzcGxheTogZmxleDsKICBmbGV4LWRpcmVjdGlvbjogcm93OwogIGZsZXgtd3JhcDogbm93cmFwOwogIHBvc2l0aW9uOiByZWxhdGl2ZTsKfQouXzFtb3I3dmUzIHsKICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC40cyBlYXNlOwp9Ci5fMW1vcjd2ZTggewogIHZlcnRpY2FsLWFsaWduOiBib3R0b207Cn0KLl8xbW9yN3ZlYSB7CiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTsKICBib3gtc2hhZG93OiAwIDAgMCAxcHggcmdiYSgxNTMsIDE2MSwgMTg5LCAwLjI0KTsKICBib3JkZXItc3BhY2luZzogMHB4IDQwcHg7Cn0KLl8xbW9yN3ZlZDpudGgtbGFzdC1jaGlsZCgxKSB7CiAgcGFkZGluZy1yaWdodDogMjBweDsKfQouXzFtb3I3dmVmOm50aC1sYXN0LWNoaWxkKDEpIHsKICBwYWRkaW5nLXJpZ2h0OiAyMHB4Owp9Ci5fMW1vcjd2ZWg6bnRoLWxhc3QtY2hpbGQoMSkgewogIHBhZGRpbmctcmlnaHQ6IDIwcHg7Cn0=\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var section = '_1mor7ve1 rgw6ez2aj rgw6ez294 rgw6ez2g1 rgw6ez2em';\nexport var activityRow = '_1mor7ve3 rgw6ez451 rgw6ez3d rgw6ez3l';\nexport var activeRow = 'rgw6ez6h1';\nexport var timestamp = 'rgw6ez451 rgw6ezap rgw6ez4gd rgw6ez3bd rgw6ez379 rgw6ez347 rgw6ez35x rgw6ez3dp rgw6ez3gx';\nexport var marketplaceIcon = '_1mor7ve8 rgw6ez10d rgw6ez171 rgw6ez77j rgw6ez3u7 rgw6ezjv';\nexport var table = '_1mor7vea rgw6ez4lp rgw6ez151 rgw6ez77v rgw6ez76j';\nexport var thead = 'rgw6ezpp rgw6ez4x1 rgw6ez7g3 rgw6ez773';\nexport var th = '_1mor7ved rgw6ezcp rgw6ezav rgw6ez7lf rgw6ez4ap rgw6ez2l7 rgw6ez24p';\nexport var td = '_1mor7vef rgw6ezcp rgw6ezb1 rgw6ez7lj rgw6ez2kj rgw6ez241 rgw6ez1h7 rgw6ez42j rgw6ez45d';\nexport var loadingTd = '_1mor7veh rgw6ezcp rgw6ezb1 rgw6ez7lj rgw6ez2kv rgw6ez24d rgw6ez1h7 rgw6ez42j rgw6ez45d';","import { LoadingBubble } from 'components/Tokens/loading'\nimport { useWindowSize } from 'hooks/useWindowSize'\nimport { useIsMobile } from 'nft/hooks'\nimport { useEffect } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { Column, ColumnInstance, HeaderGroup, IdType, useSortBy, useTable } from 'react-table'\nimport styled, { useTheme } from 'styled-components/macro'\nimport { GlowEffect, ThemedText } from 'theme'\n\nimport { Box } from '../../components/Box'\nimport { CollectionTableColumn } from '../../types'\nimport { ArrowRightIcon } from '../icons'\nimport { ColumnHeaders } from './CollectionTable'\nimport * as styles from './Explore.css'\n\n// Default table cell max width\nconst CELL_WIDTH = '160px'\n// Collection Name cell max widths\nconst MOBILE_CELL_WIDTH = '240px'\nconst DESKTOP_CELL_WIDTH = '360px'\n\nconst RankCellContainer = styled.div`\n  display: flex;\n  align-items: center;\n  padding-left: 24px;\n  gap: 12px;\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    padding-left: 8px;\n  }\n`\n\nconst StyledRow = styled.tr`\n  cursor: pointer;\n  :hover {\n    background: ${({ theme }) => theme.stateOverlayHover};\n  }\n  :active {\n    background: ${({ theme }) => theme.stateOverlayPressed};\n  }\n`\n\nconst StyledLoadingRow = styled.tr`\n  height: 80px;\n`\n\nconst StyledHeader = styled.th<{ disabled?: boolean }>`\n  ${({ disabled }) => !disabled && `cursor: pointer;`}\n\n  :hover {\n    ${({ theme, disabled }) => !disabled && `opacity: ${theme.opacity.hover};`}\n  }\n\n  :active {\n    ${({ theme, disabled }) => !disabled && `opacity: ${theme.opacity.click};`}\n  }\n`\n\nconst StyledLoadingHolder = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: end;\n  align-items: center;\n`\n\nconst StyledCollectionNameHolder = styled.div`\n  display: flex;\n  margin-left: 24px;\n  gap: 8px;\n  align-items: center;\n`\n\nconst StyledImageHolder = styled(LoadingBubble)`\n  width: 36px;\n  height: 36px;\n  border-radius: 36px;\n`\n\nconst StyledRankHolder = styled(LoadingBubble)`\n  width: 8px;\n  height: 16px;\n  margin-right: 12px;\n`\n\nconst DEFAULT_TRENDING_TABLE_QUERY_AMOUNT = 10\n\ninterface TableProps<D extends Record<string, unknown>> {\n  columns: Column<CollectionTableColumn>[]\n  data: CollectionTableColumn[]\n  smallHiddenColumns: IdType<D>[]\n  mediumHiddenColumns: IdType<D>[]\n  largeHiddenColumns: IdType<D>[]\n}\nexport function Table<D extends Record<string, unknown>>({\n  columns,\n  data,\n  smallHiddenColumns,\n  mediumHiddenColumns,\n  largeHiddenColumns,\n  ...props\n}: TableProps<D>) {\n  const theme = useTheme()\n  const { width } = useWindowSize()\n  const isMobile = useIsMobile()\n\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow, setHiddenColumns, visibleColumns } =\n    useTable(\n      {\n        columns,\n        data,\n        initialState: {\n          sortBy: [\n            {\n              desc: true,\n              id: ColumnHeaders.Volume,\n            },\n          ],\n        },\n        ...props,\n      },\n      useSortBy\n    )\n\n  const navigate = useNavigate()\n\n  useEffect(() => {\n    if (!width) return\n\n    if (width <= theme.breakpoint.sm) {\n      setHiddenColumns(smallHiddenColumns)\n    } else if (width <= theme.breakpoint.md) {\n      setHiddenColumns(mediumHiddenColumns)\n    } else if (width <= theme.breakpoint.lg) {\n      setHiddenColumns(largeHiddenColumns)\n    } else {\n      setHiddenColumns([])\n    }\n  }, [width, setHiddenColumns, columns, smallHiddenColumns, mediumHiddenColumns, largeHiddenColumns, theme.breakpoint])\n\n  if (data.length === 0) {\n    return <LoadingTable headerGroups={headerGroups} visibleColumns={visibleColumns} {...getTableProps()} />\n  }\n\n  return (\n    <GlowEffect>\n      <table {...getTableProps()} className={styles.table}>\n        <thead className={styles.thead}>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()} key={headerGroup.id}>\n              {headerGroup.headers.map((column, index) => {\n                return (\n                  <StyledHeader\n                    className={styles.th}\n                    {...column.getHeaderProps(column.getSortByToggleProps())}\n                    style={{\n                      textAlign: index === 0 ? 'left' : 'right',\n                      paddingLeft: index === 0 ? (isMobile ? '16px' : '52px') : 0,\n                    }}\n                    disabled={column.disableSortBy}\n                    key={index}\n                  >\n                    <Box as=\"span\" color=\"accentAction\" position=\"relative\">\n                      {column.isSorted ? (\n                        column.isSortedDesc ? (\n                          <ArrowRightIcon style={{ transform: 'rotate(90deg)', position: 'absolute' }} />\n                        ) : (\n                          <ArrowRightIcon style={{ transform: 'rotate(-90deg)', position: 'absolute' }} />\n                        )\n                      ) : (\n                        ''\n                      )}\n                    </Box>\n                    <Box as=\"span\" paddingLeft={column.isSorted ? '18' : '0'}>\n                      {column.render('Header')}\n                    </Box>\n                  </StyledHeader>\n                )\n              })}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {rows.map((row, i) => {\n            prepareRow(row)\n\n            return (\n              <StyledRow\n                {...row.getRowProps()}\n                key={row.id}\n                onClick={() => navigate(`/nfts/collection/${row.original.collection.address}`)}\n              >\n                {row.cells.map((cell, cellIndex) => {\n                  return (\n                    <td\n                      className={styles.td}\n                      {...cell.getCellProps()}\n                      key={cellIndex}\n                      style={{\n                        maxWidth: cellIndex === 0 ? (isMobile ? MOBILE_CELL_WIDTH : DESKTOP_CELL_WIDTH) : CELL_WIDTH,\n                      }}\n                    >\n                      {cellIndex === 0 ? (\n                        <RankCellContainer>\n                          {!isMobile && (\n                            <ThemedText.BodySecondary fontSize=\"14px\" lineHeight=\"20px\">\n                              {i + 1}\n                            </ThemedText.BodySecondary>\n                          )}\n                          {cell.render('Cell')}\n                        </RankCellContainer>\n                      ) : (\n                        cell.render('Cell')\n                      )}\n                    </td>\n                  )\n                })}\n              </StyledRow>\n            )\n          })}\n        </tbody>\n      </table>\n    </GlowEffect>\n  )\n}\n\ninterface LoadingTableProps {\n  headerGroups: HeaderGroup<CollectionTableColumn>[]\n  visibleColumns: ColumnInstance<CollectionTableColumn>[]\n}\n\nfunction LoadingTable({ headerGroups, visibleColumns, ...props }: LoadingTableProps) {\n  return (\n    <GlowEffect>\n      <table {...props} className={styles.table}>\n        <thead className={styles.thead}>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()} key={headerGroup.id}>\n              {headerGroup.headers.map((column, index) => {\n                return (\n                  <StyledHeader\n                    className={styles.th}\n                    {...column.getHeaderProps(column.getSortByToggleProps())}\n                    style={{\n                      textAlign: index === 0 ? 'left' : 'right',\n                      paddingLeft: index === 0 ? '52px' : 0,\n                    }}\n                    disabled={index === 0}\n                    key={index}\n                  >\n                    <Box as=\"span\" color=\"accentAction\" position=\"relative\">\n                      {column.isSorted ? (\n                        column.isSortedDesc ? (\n                          <ArrowRightIcon style={{ transform: 'rotate(90deg)', position: 'absolute' }} />\n                        ) : (\n                          <ArrowRightIcon style={{ transform: 'rotate(-90deg)', position: 'absolute' }} />\n                        )\n                      ) : (\n                        ''\n                      )}\n                    </Box>\n                    <Box as=\"span\" paddingLeft={column.isSorted ? '18' : '0'}>\n                      {column.render('Header')}\n                    </Box>\n                  </StyledHeader>\n                )\n              })}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...props}>\n          {[...Array(DEFAULT_TRENDING_TABLE_QUERY_AMOUNT)].map((_, index) => (\n            <StyledLoadingRow key={index}>\n              {[...Array(visibleColumns.length)].map((_, cellIndex) => {\n                return (\n                  <td className={styles.loadingTd} key={cellIndex}>\n                    {cellIndex === 0 ? (\n                      <StyledCollectionNameHolder>\n                        <StyledRankHolder />\n                        <StyledImageHolder />\n                        <LoadingBubble />\n                      </StyledCollectionNameHolder>\n                    ) : (\n                      <StyledLoadingHolder>\n                        <LoadingBubble />\n                      </StyledLoadingHolder>\n                    )}\n                  </td>\n                )\n              })}\n            </StyledLoadingRow>\n          ))}\n        </tbody>\n      </table>\n    </GlowEffect>\n  )\n}\n","import { OpacityHoverState } from 'components/Common'\nimport ms from 'ms.macro'\nimport { CollectionTableColumn, Denomination, TimePeriod, VolumeType } from 'nft/types'\nimport { fetchPrice } from 'nft/utils'\nimport { useMemo, useState } from 'react'\nimport { useQuery } from 'react-query'\nimport styled from 'styled-components/macro'\nimport { ThemedText } from 'theme'\n\nimport { fetchTrendingCollections } from '../../queries'\nimport CollectionTable from './CollectionTable'\n\nconst timeOptions: { label: string; value: TimePeriod }[] = [\n  { label: '1D', value: TimePeriod.OneDay },\n  { label: '1W', value: TimePeriod.SevenDays },\n  { label: '1M', value: TimePeriod.ThirtyDays },\n  { label: 'All', value: TimePeriod.AllTime },\n]\n\nconst ExploreContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  max-width: 1200px;\n\n  padding-left: 16px;\n  padding-right: 16px;\n  padding-top: 36px;\n`\n\nconst StyledHeader = styled.div`\n  color: ${({ theme }) => theme.textPrimary};\n  font-size: 36px;\n  line-height: 44px;\n  weight: 500;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    font-size: 20px;\n    line-height: 28px;\n  }\n`\n\nconst FiltersRow = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-top: 36px;\n  margin-bottom: 20px;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    margin-bottom: 16px;\n    margin-top: 16px;\n  }\n`\n\nconst Filter = styled.div`\n  display: flex;\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\n  border-radius: 16px;\n  padding: 4px;\n`\n\nconst Selector = styled.div<{ active: boolean }>`\n  padding: 8px 12px;\n  border-radius: 12px;\n  background: ${({ active, theme }) => (active ? theme.backgroundInteractive : 'none')};\n  cursor: pointer;\n\n  ${OpacityHoverState}\n`\n\nconst StyledSelectorText = styled(ThemedText.SubHeader)<{ active: boolean }>`\n  color: ${({ theme, active }) => (active ? theme.textPrimary : theme.textSecondary)};\n`\n\nconst TrendingCollections = () => {\n  const [timePeriod, setTimePeriod] = useState<TimePeriod>(TimePeriod.OneDay)\n  const [isEthToggled, setEthToggled] = useState(true)\n\n  const { isSuccess, data } = useQuery(\n    ['trendingCollections', timePeriod],\n    () => {\n      return fetchTrendingCollections({ volumeType: 'eth', timePeriod, size: 100 })\n    },\n    {\n      refetchOnReconnect: false,\n      refetchOnWindowFocus: false,\n      refetchOnMount: false,\n      refetchInterval: 5000,\n    }\n  )\n\n  const { data: usdPrice } = useQuery(['fetchPrice', {}], () => fetchPrice(), {\n    refetchOnReconnect: false,\n    refetchOnWindowFocus: false,\n    refetchOnMount: false,\n    refetchInterval: ms`1m`,\n  })\n\n  const trendingCollections = useMemo(() => {\n    if (isSuccess && data) {\n      return data.map((d) => ({\n        ...d,\n        collection: {\n          name: d.name,\n          logo: d.imageUrl,\n          address: d.address,\n          isVerified: d.isVerified,\n        },\n        volume: {\n          value: d.volume,\n          change: d.volumeChange,\n          type: 'eth' as VolumeType,\n        },\n        floor: {\n          value: d.floor,\n          change: d.floorChange,\n        },\n        owners: {\n          value: d.owners,\n          change: d.ownersChange,\n        },\n        sales: d.sales,\n        totalSupply: d.totalSupply,\n        denomination: isEthToggled ? Denomination.ETH : Denomination.USD,\n        usdPrice,\n      }))\n    } else return [] as CollectionTableColumn[]\n  }, [data, isSuccess, isEthToggled, usdPrice])\n\n  return (\n    <ExploreContainer>\n      <StyledHeader>Trending NFT collections</StyledHeader>\n      <FiltersRow>\n        <Filter>\n          {timeOptions.map((timeOption) => {\n            return (\n              <Selector\n                key={timeOption.value}\n                active={timeOption.value === timePeriod}\n                onClick={() => setTimePeriod(timeOption.value)}\n              >\n                <StyledSelectorText lineHeight=\"20px\" active={timeOption.value === timePeriod}>\n                  {timeOption.label}\n                </StyledSelectorText>\n              </Selector>\n            )\n          })}\n        </Filter>\n        <Filter onClick={() => setEthToggled(!isEthToggled)}>\n          <Selector active={isEthToggled}>\n            <StyledSelectorText lineHeight=\"20px\" active={isEthToggled}>\n              ETH\n            </StyledSelectorText>\n          </Selector>\n          <Selector active={!isEthToggled}>\n            <StyledSelectorText lineHeight=\"20px\" active={!isEthToggled}>\n              USD\n            </StyledSelectorText>\n          </Selector>\n        </Filter>\n      </FiltersRow>\n      <CollectionTable data={trendingCollections} timePeriod={timePeriod} />\n    </ExploreContainer>\n  )\n}\n\nexport default TrendingCollections\n","import { Trace } from '@uniswap/analytics'\nimport { PageName } from '@uniswap/analytics-events'\nimport Banner from 'nft/components/explore/Banner'\nimport TrendingCollections from 'nft/components/explore/TrendingCollections'\nimport { useBag } from 'nft/hooks'\nimport { useEffect } from 'react'\nimport styled from 'styled-components/macro'\n\nconst ExploreContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\n    gap: 16px;\n  }\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    gap: 0px;\n  }\n`\n\nconst NftExplore = () => {\n  const setBagExpanded = useBag((state) => state.setBagExpanded)\n\n  useEffect(() => {\n    setBagExpanded({ bagExpanded: false, manualClose: false })\n  }, []) // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <>\n      <Trace page={PageName.NFT_EXPLORE_PAGE} shouldLogImpression>\n        <ExploreContainer>\n          <Banner />\n          <TrendingCollections />\n        </ExploreContainer>\n      </Trace>\n    </>\n  )\n}\n\nexport default NftExplore\n"],"sourceRoot":""}